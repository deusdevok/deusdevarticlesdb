********title
An estimation of the value of Ï€ using a Monte Carlo simulation in Python
********

********slug
pi-estimate-monte-carlo
********

********featuredimage
http://shorturl.at/oHST9
********

Have you ever wondered how the value of $\pi$ can be obtained? There are several methods to do this, and in this article you are going to learn one way of estimating the value of  using a Monte Carlo Simulation in Python.

The basic idea is to randomly generate a set of points on a square, and count how many of them lies inside the circle which is inscribed in the square, and how many of them lies outside of it.

![a blue circle inscribed inside a red square](https://raw.githubusercontent.com/deusdevok/deusdevarticlesdb/main/blog/estimatepimontecarlo/piestimation1.jpeg)

*__Figure 1__. Calculating Pi using a Monte Carlo simulation.*

And where is the value of $\pi$ coming from? You know the area of the circle is $\pi\cdot R^2$. The idea is to relate the area of the square and the area of the circle with the number of points inside and outside the circle.

After some simple algebra you can obtain an equation from such a relation, and  will be one of the parameters involving that equation. Solving for  will bring an equation where the only variables will be the number of points randomly generated.

# Prerequisites

Before continuing with this reading, you need to have some basic knowledge of Mathematics and Python.

Here is a short list of topics you need to know for a better understanding of this article, along with a link with more information.

__Python__

* Python Official Site
* Python basic course from DeusDev

# Relation between areas and number of points

As stated in the introduction, the idea is to relate areas and number of points. There are various ways to do this. In this article you are going to use one in particular, which makes the algebra a little less cumbersome.

You can think of the number of points inside the circle as directly related to the area of that circle. If you use a sufficiently large amount of points randomly generated, the circle will be practically filled completely. But the number of points is not the area per se.

What can be stated is that the relation between the area of the circle and the area of the square, is equal to the relation between the number of points inside the circle and the number of points inside the square (which is the total number of points, including the ones in the circle):

$$\frac{\text{Area of the circle}}{\text{Area of the square}} = \frac{\text{Number of points inside the circle}}{\text{Total number of points}}$$

This equation will be the one that you will assume to be true. However you have to remember that the result you obtain for  will be just an approximation, since you are going to work with a set of randomly generated points.

One last thing to clarify on this equation, is the fact that the equal sign is only valid in a limiting case. This means that you should use an infinite number of points for the equation to be actually valid. For our purposes this equation will be just an approximation which helps us estimate the value of $\pi$.

# The equation for $\pi$

Let's start with the relation (division) between the area of the circle and the area of the square. Assume you have something like Figure 2, where a square of side 2R has a circle of radius R inscribed inside of it.

![A green circle of radius R inscribed inside a square of side 2R](https://raw.githubusercontent.com/deusdevok/deusdevarticlesdb/dc1ad485c47fd765f1656e478095e16b6e152a78/blog/estimatepimontecarlo/piestimation2.svg)

*__Figure 2__. A circle inscribed inside a square. The circle has radius R while the square has sides of length 2R.*

The area of the circle with radius R is $\pi\cdot R^2$ while the area of the square of side 2R is $(2\cdot R)^2=4\cdot R^2$. Replacing this values in our equation you have:

$$ \frac{\pi \cdot R^2}{4 \cdot R^2} = \frac{\text{Number of points inside the circle}}{\text{Total number of points}} $$

As you can imagine, the value of $\pi$ can't depend on the size of the circle and square in our simulation. In the left hand side of the last equation the radius squared $R^2$ cancels out:

$$ \frac{\pi}{4} = \frac{\text{Number of points inside the circle}}{\text{Total number of points}} $$

Now you can simply multiply everything by 4 and $\pi$ gets isolated:

$$ \pi = 4 \cdot \frac{\text{Number of points inside the circle}}{\text{Total number of points}} $$

Now what? Now you just have to come up with a simulation to draw a set of points, selected at random. Once you have that, you count how many points are inside the circle, how many are outside, and finally replace the values in the equation to obtain our $\pi$ approximation.

# The simulation: Python

In this article I have chosen Python as the programming language to make the simulation, but you can use the one you prefer.

Let's start by giving the number of points a short name so we can use it as variables in the Python simulation script:

* Number of points inside the circle: $N_{in}$
* Number of points outside the circle: $N_{out}$
* Total number of points: $N\_{in} + N\_{in} $

With these names the last equation now reads:

$$ \pi = 4 \cdot \frac{N\_{in}}{(N\_{in} + N\_{out})} $$

How do you generate a random point in the square? For this you can make use of the random.uniform function. This function generates a random float value between two numbers a and b. For this example you use `random.uniform(-1, 1)`, because the square lies between the values -1 and 1 (x and y coordinates). You have to use this function twice: one for the x coordinate and another for the y coordinate. This way you have a tuple (x, y) randomly generated on the square.

![A green circle of radius R inscribed inside a square of side 2R with a point with coordinates x and y](https://raw.githubusercontent.com/deusdevok/deusdevarticlesdb/dc1ad485c47fd765f1656e478095e16b6e152a78/blog/estimatepimontecarlo/piestimation3.svg)

*__Figure 3__. A tuple with coordinates (x, y) randomly generated.*

Next you have to check if that tuple (x, y) is inside the circle or not. For this you need to use the circle equation. Since the circle is centered at (0, 0) and the radius R is 1 you have for the case that the point is outside the circle:

$$ x^2+y^2 > R^2 $$

$$ x^2+y^2 > 1 $$

You can set $>$ or $\geq$, it won't make much difference in the final result. The reason for this is that the number of points lying exactly on the line will be negligible with respect to the total number of points.

You repeat this process for a number of points (say 100000, but you can start with 10, then 100 and see the results) and count how many of them lies inside and outside of the circle.

The final code can be seen next. Make a new file called `piEstimator.py` and execute it:

```python
#!/usr/bin/env python

# Estimating the value of PI: a Monte Carlo simulation

import random
import matplotlib.pyplot as plt

# random.uniform(a, b) gives a random float in the range [a , b]
# https://docs.python.org/3/library/random.html#random.uniform

Nin = 0
Nout = 0
Ntotal = 100000

x = []
y = []
colors = []

for i in range(Ntotal):
    x.append(random.uniform(-1,1))
    y.append(random.uniform(-1,1))
    if x[i]**2 + y[i]**2 > 1:
        Nout += 1
        colors.append('r')
    else:
        Nin += 1
        colors.append('b')

print('pi = {}'.format( 4*Nin/(Nin+Nout) ))

plt.figure(figsize=(6,6))

plt.scatter(x, y, c=colors, s=2)
plt.xlabel('x', fontsize=14)
plt.ylabel('y', fontsize=14)
plt.title('Pi estimation', fontsize=16)
plt.show()
```

# Final results

After running the script, a Figure is generated and the resulting value is printed on the terminal. In my case the value for  obtained is:

$$ \pi=3.14404 $$

If you run the simulation with the same number of points that I used, there is a big chance that the value you obtain is different than mine, because of the randomness of the process. However you should obtain a value close to 3.14.

Finally, the Figure I obtained looks like the following:

![a blue circle inscribed inside a red square](https://raw.githubusercontent.com/deusdevok/deusdevarticlesdb/main/blog/estimatepimontecarlo/piestimation1.jpeg)

*__Figure 4__. Calculating Pi using a Monte Carlo simulation.*

The points inside the circle are painted blue, while the remaining points outside of the circle are painted red.

# Conclusions

In this article you learned how to use a Monte Carlo simulation to estimate the value of $\pi$. The programming language used is Python to make the simulation, and the following was obtained:

* The value of $\pi$ obtained was 3.14404
* The number of random points used for the simulation was 100000
* A Figure was generated in order to visualize the process